// Input: a & b are 16-bit inputs; alufn_signal is a 4-bit input
// Output: zvn is a 3-bit output; out is a 16-bit output
module alu (
    input a[16],
    input b[16],
    input alufn_signal[4],
    output out[16],
    output zvn[3]
  ){
  adder adder1;
  mul mul1;
  boolean boolean1;
  compare compare1;
  shifter shifter1;
  enq enq1;
  shd shd1;
  
  sig s[16]; 
  sig z;
  sig v;
  sig n;
  
 

  always {
  s = b0000000000000000; 
  adder1.a = a;
  adder1.b = b;
  adder1.alufn_signal = alufn_signal;
  z = adder1.z;
  v = adder1.v;
  n = adder1.n;
    
  mul1.a = a;
  mul1.b = b;
  mul1.alufn_signal = alufn_signal;  
  
  
    
    
    
  boolean1.a = a;
  boolean1.b = b;
  boolean1.alufn_signal = alufn_signal;
    
  compare1.z = z;
  compare1.v = v;
  compare1.n = n;
  compare1.alufn_signal = alufn_signal;
  
  shifter1.a = a;
  shifter1.b = b[3:0];
  shifter1.alufn_signal = alufn_signal;
    
  enq1.a = a;
  enq1.b = b;
  enq1.alufn_signal = alufn_signal;
  
  shd1.a = a;
  shd1.b = b;
  shd1.alufn_signal = alufn_signal;
  
    
 
 
  case(alufn_signal){
      b0000: // add
      s = adder1.out;
      b0001: // sub
      s = adder1.out;
      b0010: // mul
      s = mul1.out;
      b0011: // cmpeq
      s = compare1.out;   
      b0100: // cmplt
      s = compare1.out;
      b0101: // cmple
      s = compare1.out;
      b0110: // and
      s = boolean1.out;
      b0111: // or
      s = boolean1.out;
      b1000: // xor
      s = boolean1.out;
      b1001: // a
      s = boolean1.out;
      b1010: // shl
      s = shifter1.out;
      b1011: // shr
      s = shifter1.out;
      b1100: // sra
      s = shifter1.out;
      b1101: // shd
      s = shd1.out;
      b1110: // b
      s = boolean1.out;
      b1111: // enq
      s = enq1.out;
      }
  
    out = s;
    zvn[0] = n;
    zvn[1] = v;
    zvn[2] = z;    
  }
}

