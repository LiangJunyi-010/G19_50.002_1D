module random_gen_q (
    input clk,  // clock
    input rst,  // reset
    input trigger,
    input q[16],
    output out[16]
  ) {
  //pn_gen pn_gen1(.clk(clk),.rst(rst),.seed(32h100)); 
  //counter time_change(#SIZE(1),#DIV(25),.clk(clk), .rst(rst));
  //edge_detector detector1(#RISE(1), #FALL(0), .clk(clk));
  //sig s[4];
  //dff v[2](.clk(clk));
  dff t(.clk(clk));
  dff v[16](.clk(clk));
  
  always {
    if(t.q==0&&trigger){
    t.d = t.q+1;
    out = 16b1110011110010110;
      }
    else{
    v.d = q;
    out[3:0] = v.q[15:12];
    out[7:4] = v.q[11:8];
    out[11:8] = v.q[7:4];
    out[15:12] = v.q[3:0];
      }
    //detector1.in = time_change.value;
    //pn_gen1.next = trigger & detector1.out;
    //s = pn_gen1.num[1:0];
    
    //if(rst){
    //if(v.q == b11){
      //v.d = 0;
        //}
    //v.d = v.q+1;
      //}
    
   //s = v.q;
    //case(s)
    //{
    //b00: out = 16b1110011110010110;
    //b01: out = 16b0110111001111001;
    //b10: out = 16b1110100101110110;
   // b11: out = 16b0110010111111010;
    
        
 //   default: out = 16b1110100101110110;
   // }
    
    
    
 
      
  
    }
}
