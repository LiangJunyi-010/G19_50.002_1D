module beta (
    input left_button,
    input central_button,
    input right_button,


    
    input clk,  // clock
    input rst,  // reset

    output time_out[4],
    output score_out[8],
    output leds[16],
    output fuck[5],
    output r_out[16],
    


    
    output seven_seg2_timer_dec,
    output seven_seg2_timer_rst,
    
    output seven_seg1_score_inc,
    output seven_seg1_score_rst

  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];

  
  
  alu alu1;
  cu cu1(.clk(clk), .rst(rst));
  regfile regfile1(.clk(clk), .rst(rst));
  edge_detector game_timer_detector(#RISE(1), #FALL(0), .clk(clk));
  counter slow_timer(#SIZE(1),#DIV(26),.clk(clk), .rst(rst));
  random_gen_q random_gen_q1(.clk(clk),.rst(rst));
  random_gen_row random_gen_row1(.clk(clk),.rst(rst));
  
  
  
  
  .clk(clk){

    .rst(rst){}
  }
  
  
  
  always {


  fuck = cu1.fuck;
    random_gen_q1.trigger = 0;
    random_gen_row1.trigger = 0;
    
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // 30 second timer detector

    
    //pass timer and counter signals to CU unit
    cu1.st = game_timer_detector.out; 


    
    //pass button press signal to CU unit
    cu1.left_button = left_button;
    cu1.right_button = right_button;
    cu1.central_button = central_button;


    
    
    //output of CU to decrease 7segment
    seven_seg2_timer_dec = cu1.seven_seg2[1];
    seven_seg2_timer_rst = cu1.seven_seg2[0];
    
    
    
    //output of CU to increase 7segment
    seven_seg1_score_inc = cu1.seven_seg1[1];
    seven_seg1_score_rst = cu1.seven_seg1[0];
    
    
   
    

    
    //Setup REGFILE unit 
    regfile1.we = cu1.we;
    regfile1.write_address = cu1.regfile_write_address;
   
    regfile1.read_address_a = cu1.regfile_read_address_a;
    regfile1.read_address_b = cu1.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    cu1.rb_data = regfile1.out_b;
    
    
    
    //asel mux
    case(cu1.asel){
      b000  : inputAlu_a = regfile1.out_a;
      b001  : inputAlu_a = b1; 
      b010  : inputAlu_a = b0;
      b011  : inputAlu_a = b1111;
      b100  : inputAlu_a = b1100;
      b101  : inputAlu_a = b0001;
      b110  : inputAlu_a = b0010;
      b111  : inputAlu_a = b0011;
      default : //b10 unused
          inputAlu_a = b0;
    }
    
    //bsel mux
    case(cu1.bsel){
      b000  : inputAlu_b = regfile1.out_b;
      b001  : inputAlu_b = b1; 
      b010  : inputAlu_b = b0;
      b011  : inputAlu_b = b0011;
      b100  : inputAlu_b = b1111;
      b101  : inputAlu_b = b0100;
      b110  : inputAlu_b = b1000;
      b111  : inputAlu_b = b1100;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    alu1.a = inputAlu_a;
    alu1.b = inputAlu_b;
    alu1.alufn_signal = cu1.alufn;
   
    
    //wdsel mux
    case (cu1.wdsel){
      b00 : regfile1.data = alu1.out;
      b01 : regfile1.data = b1100110011001100;
      b11 : random_gen_q1.trigger=1;
            regfile1.data = random_gen_q1.out;
      b10 : random_gen_row1.trigger=1;
            regfile1.data = random_gen_row1.out;
      default : //b00
          regfile1.data = alu1.out;
    }
    

    
    time_out = regfile1.timer_out;
    score_out = regfile1.score_out[7:0];
    leds = regfile1.q_out[15:0];
    r_out = regfile1.r_out;
  }
}
