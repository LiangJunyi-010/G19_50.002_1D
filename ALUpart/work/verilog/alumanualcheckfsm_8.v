/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alumanualcheckfsm_8 (
    input clk,
    input rst,
    input bts,
    input bts1,
    input [15:0] swis,
    input sw,
    output reg [15:0] out,
    output reg [2:0] zvn,
    output reg [2:0] ls
  );
  
  
  
  
  localparam S0_manual_controller = 2'd0;
  localparam S1_manual_controller = 2'd1;
  localparam S2_manual_controller = 2'd2;
  localparam S3_manual_controller = 2'd3;
  
  reg [1:0] M_manual_controller_d, M_manual_controller_q = S0_manual_controller;
  
  reg [15:0] M_register_1_d, M_register_1_q = 1'h0;
  
  reg [15:0] M_register_2_d, M_register_2_q = 1'h0;
  
  reg [15:0] M_register_3_d, M_register_3_q = 1'h0;
  
  wire [16-1:0] M_alu1_out;
  wire [3-1:0] M_alu1_zvn;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [4-1:0] M_alu1_alufn_signal;
  alu_15 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn_signal(M_alu1_alufn_signal),
    .out(M_alu1_out),
    .zvn(M_alu1_zvn)
  );
  
  reg [15:0] s;
  
  reg [2:0] zvn0;
  
  reg [2:0] ls0;
  
  always @* begin
    M_manual_controller_d = M_manual_controller_q;
    M_register_3_d = M_register_3_q;
    M_register_2_d = M_register_2_q;
    M_register_1_d = M_register_1_q;
    
    s = 16'h0000;
    zvn0 = 3'h0;
    ls0 = 4'h0;
    M_alu1_a = M_register_1_q;
    M_alu1_b = M_register_2_q;
    M_alu1_alufn_signal = M_register_3_q[0+3-:4];
    
    case (M_manual_controller_q)
      S0_manual_controller: begin
        ls0[0+0-:1] = 1'h1;
        s = swis;
        M_register_1_d = s;
        if (bts) begin
          M_manual_controller_d = S1_manual_controller;
        end
        if (bts1) begin
          M_manual_controller_d = S0_manual_controller;
        end
      end
      S1_manual_controller: begin
        ls0[1+0-:1] = 1'h1;
        s = swis;
        M_register_2_d = s;
        if (bts) begin
          M_manual_controller_d = S2_manual_controller;
        end
        if (bts1) begin
          M_manual_controller_d = S0_manual_controller;
        end
      end
      S2_manual_controller: begin
        ls0[2+0-:1] = 1'h1;
        s = swis[0+3-:4];
        M_register_3_d = s;
        if (bts) begin
          M_manual_controller_d = S3_manual_controller;
        end
        if (bts1) begin
          M_manual_controller_d = S0_manual_controller;
        end
      end
      S3_manual_controller: begin
        ls0 = 3'h7;
        s = M_alu1_out;
        zvn0 = M_alu1_zvn;
        if (bts) begin
          M_manual_controller_d = S0_manual_controller;
        end
        if (bts1) begin
          M_manual_controller_d = S0_manual_controller;
        end
      end
    endcase
    if (sw) begin
      out[0+0-:1] = ~s[0+0-:1];
      out[1+14-:15] = s[1+14-:15];
      zvn = zvn0;
      ls = ls0;
    end else begin
      out = s;
      zvn = zvn0;
      ls = ls0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_2_q <= 1'h0;
    end else begin
      M_register_2_q <= M_register_2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_3_q <= 1'h0;
    end else begin
      M_register_3_q <= M_register_3_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_manual_controller_q <= 1'h0;
    end else begin
      M_manual_controller_q <= M_manual_controller_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_1_q <= 1'h0;
    end else begin
      M_register_1_q <= M_register_1_d;
    end
  end
  
endmodule
