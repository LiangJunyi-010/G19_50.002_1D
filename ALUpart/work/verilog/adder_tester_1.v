/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_tester_1 (
    input clk,
    input rst,
    input start,
    output reg [1:0] s
  );
  
  
  
  reg [3:0] M_register_d, M_register_q = 1'h0;
  
  wire [1-1:0] M_slowclock_value;
  counter_3 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam IDLE_state = 2'd0;
  localparam ON_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [5-1:0] M_adder_alufn_signal;
  adder_4 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn_signal(M_adder_alufn_signal),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_register_d = M_register_q;
    
    s = 1'h0;
    M_adder_a = 1'h0;
    M_adder_b = 1'h0;
    M_adder_alufn_signal = 5'h00;
    if (start == 1'h0) begin
      M_state_d = IDLE_state;
    end
    
    case (M_state_q)
      IDLE_state: begin
        s = 1'h0;
        if (start == 1'h1) begin
          M_state_d = ON_state;
        end
      end
      ON_state: begin
        
        case (M_register_q)
          5'h00: begin
            M_adder_a = 16'h001e;
            M_adder_b = 16'h001f;
            M_adder_alufn_signal = 5'h00;
            if (M_adder_out != 16'h003d) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'hffe2;
            M_adder_b = 16'h001f;
            M_adder_alufn_signal = 5'h00;
            if (M_adder_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'hffe2;
            M_adder_b = 16'hffe1;
            M_adder_alufn_signal = 5'h00;
            if (M_adder_out != 16'hffc3) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'h8000;
            M_adder_b = 16'h8000;
            M_adder_alufn_signal = 5'h00;
            if (M_adder_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
            M_state_d = PASS_state;
          end
          5'h01: begin
            M_adder_a = 16'h001e;
            M_adder_b = 16'h001f;
            M_adder_alufn_signal = 5'h01;
            if (M_adder_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'hffe2;
            M_adder_b = 16'h001f;
            M_adder_alufn_signal = 5'h01;
            if (M_adder_out != 16'hffc3) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'hffe2;
            M_adder_b = 16'hffe1;
            M_adder_alufn_signal = 5'h01;
            if (M_adder_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
            M_state_d = PASS_state;
            M_adder_a = 16'h8000;
            M_adder_b = 16'h8000;
            M_adder_alufn_signal = 5'h01;
            if (M_adder_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
          end
          5'h02: begin
            M_adder_a = 16'h001e;
            M_adder_b = 16'h001f;
            M_adder_alufn_signal = 5'h02;
            if (M_adder_out != 16'h03a2) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'h001e;
            M_adder_b = 16'hffe1;
            M_adder_alufn_signal = 5'h02;
            if (M_adder_out != 16'hfc5e) begin
              M_state_d = FAIL_state;
            end
            M_state_d = PASS_state;
          end
          5'h03: begin
            M_adder_a = 16'h0032;
            M_adder_b = 16'h0002;
            M_adder_alufn_signal = 5'h03;
            if (M_adder_out != 16'h0019) begin
              M_state_d = FAIL_state;
            end
            M_adder_a = 16'hffce;
            M_adder_b = 16'h0002;
            M_adder_alufn_signal = 5'h03;
            if (M_adder_out != 16'hffe7) begin
              M_state_d = FAIL_state;
            end
            M_state_d = PASS_state;
          end
        endcase
      end
      PASS_state: begin
        s = 1'h1;
      end
      FAIL_state: begin
        s = 2'h2;
      end
    endcase
    M_register_d = M_register_q;
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_q <= 1'h0;
    end else begin
      M_register_q <= M_register_d;
    end
  end
  
endmodule
