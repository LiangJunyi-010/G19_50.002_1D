/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_15 (
    input [15:0] a,
    input [15:0] b,
    input [3:0] alufn_signal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_adder1_out;
  wire [1-1:0] M_adder1_z;
  wire [1-1:0] M_adder1_v;
  wire [1-1:0] M_adder1_n;
  reg [16-1:0] M_adder1_a;
  reg [16-1:0] M_adder1_b;
  reg [4-1:0] M_adder1_alufn_signal;
  adder_20 adder1 (
    .a(M_adder1_a),
    .b(M_adder1_b),
    .alufn_signal(M_adder1_alufn_signal),
    .out(M_adder1_out),
    .z(M_adder1_z),
    .v(M_adder1_v),
    .n(M_adder1_n)
  );
  
  wire [16-1:0] M_mul1_out;
  reg [16-1:0] M_mul1_a;
  reg [16-1:0] M_mul1_b;
  reg [4-1:0] M_mul1_alufn_signal;
  mul_21 mul1 (
    .a(M_mul1_a),
    .b(M_mul1_b),
    .alufn_signal(M_mul1_alufn_signal),
    .out(M_mul1_out)
  );
  
  wire [16-1:0] M_boolean1_out;
  reg [16-1:0] M_boolean1_a;
  reg [16-1:0] M_boolean1_b;
  reg [4-1:0] M_boolean1_alufn_signal;
  boolean_22 boolean1 (
    .a(M_boolean1_a),
    .b(M_boolean1_b),
    .alufn_signal(M_boolean1_alufn_signal),
    .out(M_boolean1_out)
  );
  
  wire [16-1:0] M_compare1_out;
  reg [1-1:0] M_compare1_z;
  reg [1-1:0] M_compare1_v;
  reg [1-1:0] M_compare1_n;
  reg [4-1:0] M_compare1_alufn_signal;
  compare_23 compare1 (
    .z(M_compare1_z),
    .v(M_compare1_v),
    .n(M_compare1_n),
    .alufn_signal(M_compare1_alufn_signal),
    .out(M_compare1_out)
  );
  
  wire [16-1:0] M_shifter1_out;
  reg [16-1:0] M_shifter1_a;
  reg [4-1:0] M_shifter1_b;
  reg [4-1:0] M_shifter1_alufn_signal;
  shifter_24 shifter1 (
    .a(M_shifter1_a),
    .b(M_shifter1_b),
    .alufn_signal(M_shifter1_alufn_signal),
    .out(M_shifter1_out)
  );
  
  wire [16-1:0] M_enq1_out;
  reg [16-1:0] M_enq1_a;
  reg [16-1:0] M_enq1_b;
  reg [4-1:0] M_enq1_alufn_signal;
  enq_25 enq1 (
    .a(M_enq1_a),
    .b(M_enq1_b),
    .alufn_signal(M_enq1_alufn_signal),
    .out(M_enq1_out)
  );
  
  wire [16-1:0] M_shd1_out;
  reg [16-1:0] M_shd1_a;
  reg [16-1:0] M_shd1_b;
  reg [4-1:0] M_shd1_alufn_signal;
  shd_26 shd1 (
    .a(M_shd1_a),
    .b(M_shd1_b),
    .alufn_signal(M_shd1_alufn_signal),
    .out(M_shd1_out)
  );
  
  reg [15:0] s;
  
  reg z;
  
  reg v;
  
  reg n;
  
  always @* begin
    s = 16'h0000;
    M_adder1_a = a;
    M_adder1_b = b;
    M_adder1_alufn_signal = alufn_signal;
    z = M_adder1_z;
    v = M_adder1_v;
    n = M_adder1_n;
    M_mul1_a = a;
    M_mul1_b = b;
    M_mul1_alufn_signal = alufn_signal;
    M_boolean1_a = a;
    M_boolean1_b = b;
    M_boolean1_alufn_signal = alufn_signal;
    M_compare1_z = z;
    M_compare1_v = v;
    M_compare1_n = n;
    M_compare1_alufn_signal = alufn_signal;
    M_shifter1_a = a;
    M_shifter1_b = b[0+3-:4];
    M_shifter1_alufn_signal = alufn_signal;
    M_enq1_a = a;
    M_enq1_b = b;
    M_enq1_alufn_signal = alufn_signal;
    M_shd1_a = a;
    M_shd1_b = b;
    M_shd1_alufn_signal = alufn_signal;
    
    case (alufn_signal)
      4'h0: begin
        s = M_adder1_out;
      end
      4'h1: begin
        s = M_adder1_out;
      end
      4'h2: begin
        s = M_mul1_out;
      end
      4'h3: begin
        s = M_compare1_out;
      end
      4'h4: begin
        s = M_compare1_out;
      end
      4'h5: begin
        s = M_compare1_out;
      end
      4'h6: begin
        s = M_boolean1_out;
      end
      4'h7: begin
        s = M_boolean1_out;
      end
      4'h8: begin
        s = M_boolean1_out;
      end
      4'h9: begin
        s = M_boolean1_out;
      end
      4'ha: begin
        s = M_shifter1_out;
      end
      4'hb: begin
        s = M_shifter1_out;
      end
      4'hc: begin
        s = M_shifter1_out;
      end
      4'hd: begin
        s = M_shd1_out;
      end
      4'hf: begin
        s = M_enq1_out;
      end
    endcase
    out = s;
    zvn[0+0-:1] = n;
    zvn[1+0-:1] = v;
    zvn[2+0-:1] = z;
  end
endmodule
