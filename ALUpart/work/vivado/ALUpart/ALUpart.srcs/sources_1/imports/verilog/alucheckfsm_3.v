/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alucheckfsm_3 (
    input clk,
    input rst,
    input bt,
    output reg [15:0] out,
    output reg [1:0] show,
    output reg [2:0] zvn,
    output reg [2:0] ls,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  
  localparam S0_fsm_controller = 1'd0;
  localparam S1_fsm_controller = 1'd1;
  
  reg M_fsm_controller_d, M_fsm_controller_q = S0_fsm_controller;
  
  wire [1-1:0] M_slowclock_value;
  counter_7 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [16-1:0] M_alumanualcheckfsm1_out;
  wire [3-1:0] M_alumanualcheckfsm1_zvn;
  wire [3-1:0] M_alumanualcheckfsm1_ls;
  reg [1-1:0] M_alumanualcheckfsm1_bts;
  reg [1-1:0] M_alumanualcheckfsm1_bts1;
  reg [16-1:0] M_alumanualcheckfsm1_swis;
  reg [1-1:0] M_alumanualcheckfsm1_sw;
  alumanualcheckfsm_8 alumanualcheckfsm1 (
    .clk(clk),
    .rst(rst),
    .bts(M_alumanualcheckfsm1_bts),
    .bts1(M_alumanualcheckfsm1_bts1),
    .swis(M_alumanualcheckfsm1_swis),
    .sw(M_alumanualcheckfsm1_sw),
    .out(M_alumanualcheckfsm1_out),
    .zvn(M_alumanualcheckfsm1_zvn),
    .ls(M_alumanualcheckfsm1_ls)
  );
  
  wire [16-1:0] M_aluromcheckfsm1_out;
  wire [2-1:0] M_aluromcheckfsm1_show;
  wire [3-1:0] M_aluromcheckfsm1_zvn;
  reg [1-1:0] M_aluromcheckfsm1_buttons;
  aluromcheckfsm_9 aluromcheckfsm1 (
    .clk(M_slowclock_value),
    .rst(rst),
    .buttons(M_aluromcheckfsm1_buttons),
    .out(M_aluromcheckfsm1_out),
    .show(M_aluromcheckfsm1_show),
    .zvn(M_aluromcheckfsm1_zvn)
  );
  
  wire [1-1:0] M_buttoncond_out;
  reg [1-1:0] M_buttoncond_in;
  button_conditioner_1 buttoncond (
    .clk(clk),
    .in(M_buttoncond_in),
    .out(M_buttoncond_out)
  );
  
  wire [1-1:0] M_buttondetector_out;
  reg [1-1:0] M_buttondetector_in;
  edge_detector_2 buttondetector (
    .clk(clk),
    .in(M_buttondetector_in),
    .out(M_buttondetector_out)
  );
  
  wire [1-1:0] M_buttoncond1_out;
  reg [1-1:0] M_buttoncond1_in;
  button_conditioner_1 buttoncond1 (
    .clk(clk),
    .in(M_buttoncond1_in),
    .out(M_buttoncond1_out)
  );
  
  wire [1-1:0] M_buttondetector1_out;
  reg [1-1:0] M_buttondetector1_in;
  edge_detector_2 buttondetector1 (
    .clk(clk),
    .in(M_buttondetector1_in),
    .out(M_buttondetector1_out)
  );
  
  reg [15:0] o;
  
  reg [1:0] s;
  
  reg [2:0] zvn0;
  
  reg [2:0] ls0;
  
  always @* begin
    M_fsm_controller_d = M_fsm_controller_q;
    
    M_aluromcheckfsm1_buttons = io_dip[16+0+0-:1];
    M_alumanualcheckfsm1_sw = io_dip[16+7+0-:1];
    M_buttoncond_in = io_button[0+0-:1];
    M_buttondetector_in = M_buttoncond_out;
    M_alumanualcheckfsm1_bts = M_buttondetector_out;
    M_buttoncond1_in = io_button[3+0-:1];
    M_buttondetector1_in = M_buttoncond1_out;
    M_alumanualcheckfsm1_bts1 = M_buttondetector1_out;
    M_alumanualcheckfsm1_swis[0+7-:8] = io_dip[0+7-:8];
    M_alumanualcheckfsm1_swis[8+7-:8] = io_dip[8+7-:8];
    o = 16'h0000;
    s = 2'h0;
    zvn0 = 3'h0;
    ls0 = 3'h0;
    
    case (M_fsm_controller_q)
      S0_fsm_controller: begin
        o = M_aluromcheckfsm1_out;
        s = M_aluromcheckfsm1_show;
        zvn0 = M_aluromcheckfsm1_zvn;
        if (bt) begin
          M_fsm_controller_d = S1_fsm_controller;
        end
      end
      S1_fsm_controller: begin
        o[0+7-:8] = M_alumanualcheckfsm1_out[0+7-:8];
        o[8+7-:8] = M_alumanualcheckfsm1_out[8+7-:8];
        zvn0 = M_alumanualcheckfsm1_zvn;
        ls0 = M_alumanualcheckfsm1_ls;
        if (bt) begin
          M_fsm_controller_d = S0_fsm_controller;
        end
      end
    endcase
    out = o;
    show = s;
    zvn = zvn0;
    ls = ls0;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_fsm_controller_q <= 1'h0;
    end else begin
      M_fsm_controller_q <= M_fsm_controller_d;
    end
  end
  
endmodule
