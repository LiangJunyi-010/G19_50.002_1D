/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module aluromcheckfsm_9 (
    input clk,
    input rst,
    input buttons,
    output reg [15:0] out,
    output reg [1:0] show,
    output reg [2:0] zvn
  );
  
  
  
  
  localparam S0_y_controller = 6'd0;
  localparam S1_y_controller = 6'd1;
  localparam S2_y_controller = 6'd2;
  localparam S3_y_controller = 6'd3;
  localparam S4_y_controller = 6'd4;
  localparam S5_y_controller = 6'd5;
  localparam S6_y_controller = 6'd6;
  localparam S7_y_controller = 6'd7;
  localparam S8_y_controller = 6'd8;
  localparam S9_y_controller = 6'd9;
  localparam S10_y_controller = 6'd10;
  localparam S11_y_controller = 6'd11;
  localparam S12_y_controller = 6'd12;
  localparam S13_y_controller = 6'd13;
  localparam S14_y_controller = 6'd14;
  localparam S15_y_controller = 6'd15;
  localparam S16_y_controller = 6'd16;
  localparam S17_y_controller = 6'd17;
  localparam S18_y_controller = 6'd18;
  localparam S19_y_controller = 6'd19;
  localparam S20_y_controller = 6'd20;
  localparam S21_y_controller = 6'd21;
  localparam S22_y_controller = 6'd22;
  localparam S23_y_controller = 6'd23;
  localparam S24_y_controller = 6'd24;
  localparam S25_y_controller = 6'd25;
  localparam S26_y_controller = 6'd26;
  localparam S27_y_controller = 6'd27;
  localparam S28_y_controller = 6'd28;
  localparam S29_y_controller = 6'd29;
  localparam S30_y_controller = 6'd30;
  localparam S31_y_controller = 6'd31;
  localparam S32_y_controller = 6'd32;
  localparam S33_y_controller = 6'd33;
  localparam S34_y_controller = 6'd34;
  localparam S35_y_controller = 6'd35;
  localparam S36_y_controller = 6'd36;
  localparam S37_y_controller = 6'd37;
  localparam S38_y_controller = 6'd38;
  localparam S39_y_controller = 6'd39;
  localparam S40_y_controller = 6'd40;
  localparam S41_y_controller = 6'd41;
  localparam S42_y_controller = 6'd42;
  localparam S43_y_controller = 6'd43;
  localparam S44_y_controller = 6'd44;
  localparam S45_y_controller = 6'd45;
  localparam S46_y_controller = 6'd46;
  localparam S47_y_controller = 6'd47;
  localparam S48_y_controller = 6'd48;
  localparam S49_y_controller = 6'd49;
  localparam S50_y_controller = 6'd50;
  localparam S51_y_controller = 6'd51;
  localparam S52_y_controller = 6'd52;
  
  reg [5:0] M_y_controller_d, M_y_controller_q = S0_y_controller;
  
  wire [16-1:0] M_rom1_oA;
  wire [16-1:0] M_rom1_oB;
  wire [4-1:0] M_rom1_alufn;
  wire [3-1:0] M_rom1_oZVN;
  wire [16-1:0] M_rom1_out;
  reg [6-1:0] M_rom1_address;
  rom_16 rom1 (
    .address(M_rom1_address),
    .oA(M_rom1_oA),
    .oB(M_rom1_oB),
    .alufn(M_rom1_alufn),
    .oZVN(M_rom1_oZVN),
    .out(M_rom1_out)
  );
  
  wire [16-1:0] M_alu1_out;
  wire [3-1:0] M_alu1_zvn;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [4-1:0] M_alu1_alufn_signal;
  alu_15 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn_signal(M_alu1_alufn_signal),
    .out(M_alu1_out),
    .zvn(M_alu1_zvn)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [15:0] s;
  
  reg [2:0] zvn0;
  
  reg [3:0] alufn_sig;
  
  reg [15:0] num_out;
  
  reg [1:0] num_show;
  
  reg [2:0] zvn1;
  
  always @* begin
    M_y_controller_d = M_y_controller_q;
    
    M_rom1_address = 6'h00;
    s = M_rom1_out;
    zvn0 = M_rom1_oZVN;
    alufn_sig = M_rom1_alufn;
    a = M_rom1_oA;
    b = M_rom1_oB;
    M_alu1_a = a;
    M_alu1_b = b;
    M_alu1_alufn_signal = alufn_sig;
    num_out = M_alu1_out;
    zvn1 = M_alu1_zvn;
    
    case (M_y_controller_q)
      S0_y_controller: begin
        M_rom1_address = 6'h00;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S1_y_controller;
      end
      S1_y_controller: begin
        M_rom1_address = 6'h01;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S2_y_controller;
      end
      S2_y_controller: begin
        M_rom1_address = 6'h02;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S3_y_controller;
      end
      S3_y_controller: begin
        M_rom1_address = 6'h03;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S4_y_controller;
      end
      S4_y_controller: begin
        M_rom1_address = 6'h04;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S5_y_controller;
      end
      S5_y_controller: begin
        M_rom1_address = 6'h05;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S6_y_controller;
      end
      S6_y_controller: begin
        M_rom1_address = 6'h06;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S7_y_controller;
      end
      S7_y_controller: begin
        M_rom1_address = 6'h07;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S8_y_controller;
      end
      S8_y_controller: begin
        M_rom1_address = 6'h08;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S9_y_controller;
      end
      S9_y_controller: begin
        M_rom1_address = 6'h09;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S10_y_controller;
      end
      S10_y_controller: begin
        M_rom1_address = 6'h0a;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S11_y_controller;
      end
      S11_y_controller: begin
        M_rom1_address = 6'h0b;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S12_y_controller;
      end
      S12_y_controller: begin
        M_rom1_address = 6'h0c;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S13_y_controller;
      end
      S13_y_controller: begin
        M_rom1_address = 6'h0d;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S14_y_controller;
      end
      S14_y_controller: begin
        M_rom1_address = 6'h0e;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S15_y_controller;
      end
      S15_y_controller: begin
        M_rom1_address = 6'h0f;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S16_y_controller;
      end
      S16_y_controller: begin
        M_rom1_address = 6'h10;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S17_y_controller;
      end
      S17_y_controller: begin
        M_rom1_address = 6'h11;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S18_y_controller;
      end
      S18_y_controller: begin
        M_rom1_address = 6'h12;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S19_y_controller;
      end
      S19_y_controller: begin
        M_rom1_address = 6'h13;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S20_y_controller;
      end
      S20_y_controller: begin
        M_rom1_address = 6'h14;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S21_y_controller;
      end
      S21_y_controller: begin
        M_rom1_address = 6'h15;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S22_y_controller;
      end
      S22_y_controller: begin
        M_rom1_address = 6'h16;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S23_y_controller;
      end
      S23_y_controller: begin
        M_rom1_address = 6'h17;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S24_y_controller;
      end
      S24_y_controller: begin
        M_rom1_address = 6'h18;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S25_y_controller;
      end
      S25_y_controller: begin
        M_rom1_address = 6'h19;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S26_y_controller;
      end
      S26_y_controller: begin
        M_rom1_address = 6'h1a;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S27_y_controller;
      end
      S27_y_controller: begin
        M_rom1_address = 6'h1b;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S28_y_controller;
      end
      S28_y_controller: begin
        M_rom1_address = 6'h1c;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S29_y_controller;
      end
      S29_y_controller: begin
        M_rom1_address = 6'h1d;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S30_y_controller;
      end
      S30_y_controller: begin
        M_rom1_address = 6'h1e;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S31_y_controller;
      end
      S31_y_controller: begin
        M_rom1_address = 6'h1f;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S32_y_controller;
      end
      S32_y_controller: begin
        M_rom1_address = 6'h20;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S33_y_controller;
      end
      S33_y_controller: begin
        M_rom1_address = 6'h21;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S34_y_controller;
      end
      S34_y_controller: begin
        M_rom1_address = 6'h22;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S35_y_controller;
      end
      S35_y_controller: begin
        M_rom1_address = 7'h23;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S36_y_controller;
      end
      S36_y_controller: begin
        M_rom1_address = 6'h24;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S37_y_controller;
      end
      S37_y_controller: begin
        M_rom1_address = 6'h25;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S38_y_controller;
      end
      S38_y_controller: begin
        M_rom1_address = 6'h26;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S39_y_controller;
      end
      S39_y_controller: begin
        M_rom1_address = 6'h27;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S40_y_controller;
      end
      S40_y_controller: begin
        M_rom1_address = 6'h28;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S41_y_controller;
      end
      S41_y_controller: begin
        M_rom1_address = 6'h29;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S42_y_controller;
      end
      S42_y_controller: begin
        M_rom1_address = 6'h2a;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S43_y_controller;
      end
      S43_y_controller: begin
        M_rom1_address = 6'h2b;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S44_y_controller;
      end
      S44_y_controller: begin
        M_rom1_address = 6'h2c;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S45_y_controller;
      end
      S45_y_controller: begin
        M_rom1_address = 6'h2d;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S46_y_controller;
      end
      S46_y_controller: begin
        M_rom1_address = 6'h2e;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S47_y_controller;
      end
      S47_y_controller: begin
        M_rom1_address = 6'h2f;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S48_y_controller;
      end
      S48_y_controller: begin
        M_rom1_address = 6'h30;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S49_y_controller;
      end
      S49_y_controller: begin
        M_rom1_address = 6'h31;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S50_y_controller;
      end
      S50_y_controller: begin
        M_rom1_address = 6'h32;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S51_y_controller;
      end
      S51_y_controller: begin
        M_rom1_address = 6'h33;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S52_y_controller;
      end
      S52_y_controller: begin
        M_rom1_address = 6'h34;
        if (num_out == s) begin
          num_show = 2'h1;
        end else begin
          num_show = 2'h2;
        end
        M_y_controller_d = S0_y_controller;
      end
    endcase
    if (buttons) begin
      out[0+0-:1] = ~num_out[0+0-:1];
      out[1+14-:15] = num_out[1+14-:15];
      show = 2'h2;
      zvn = zvn1;
    end else begin
      out = num_out;
      show = num_show;
      zvn = zvn1;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_y_controller_q <= 1'h0;
    end else begin
      M_y_controller_q <= M_y_controller_d;
    end
  end
  
endmodule
