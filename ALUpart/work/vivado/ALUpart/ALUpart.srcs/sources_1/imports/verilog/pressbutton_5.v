/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module pressbutton_5 (
    input clk,
    input rst,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button
  );
  
  
  
  wire [1-1:0] M_inc_detector_out;
  reg [1-1:0] M_inc_detector_in;
  edge_detector_2 inc_detector (
    .clk(clk),
    .in(M_inc_detector_in),
    .out(M_inc_detector_out)
  );
  wire [(3'h4+0)-1:0] M_button_detector_out;
  reg [(3'h4+0)-1:0] M_button_detector_in;
  
  genvar GEN_button_detector0;
  generate
  for (GEN_button_detector0=0;GEN_button_detector0<3'h4;GEN_button_detector0=GEN_button_detector0+1) begin: button_detector_gen_0
    edge_detector_2 button_detector (
      .clk(clk),
      .in(M_button_detector_in[GEN_button_detector0*(1)+(1)-1-:(1)]),
      .out(M_button_detector_out[GEN_button_detector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h4+0)-1:0] M_button_conditioner_out;
  reg [(3'h4+0)-1:0] M_button_conditioner_in;
  
  genvar GEN_button_conditioner0;
  generate
  for (GEN_button_conditioner0=0;GEN_button_conditioner0<3'h4;GEN_button_conditioner0=GEN_button_conditioner0+1) begin: button_conditioner_gen_0
    button_conditioner_1 button_conditioner (
      .clk(clk),
      .in(M_button_conditioner_in[GEN_button_conditioner0*(1)+(1)-1-:(1)]),
      .out(M_button_conditioner_out[GEN_button_conditioner0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_10 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_11 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_next;
  pn_gen_12 pn_gen (
    .clk(clk),
    .rst(rst),
    .seed(32'h00000100),
    .next(M_pn_gen_next),
    .num(M_pn_gen_num)
  );
  
  reg [1:0] position;
  
  reg [3:0] answer;
  
  reg hit;
  
  wire [24-1:0] M_pos_to_led_led;
  reg [2-1:0] M_pos_to_led_pos;
  pos_to_led_13 pos_to_led (
    .pos(M_pos_to_led_pos),
    .led(M_pos_to_led_led)
  );
  
  wire [4-1:0] M_pos_to_button_out;
  reg [2-1:0] M_pos_to_button_in;
  decoder_14 pos_to_button (
    .in(M_pos_to_button_in),
    .out(M_pos_to_button_out)
  );
  
  always @* begin
    position = M_pn_gen_num[0+1-:2];
    M_pos_to_led_pos = position;
    io_led = M_pos_to_led_led;
    M_button_conditioner_in = {io_button[0+0-:1], io_button[3+0-:1], io_button[1+0-:1], io_button[4+0-:1]};
    M_button_detector_in = M_button_conditioner_out;
    M_pos_to_button_in = position;
    answer = M_pos_to_button_out;
    hit = M_button_detector_out == answer;
    M_inc_detector_in = hit;
    M_pn_gen_next = hit;
    M_dec_ctr_inc = M_inc_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
endmodule
