// Input: address is a 6-bit input
// Output: oA is a 16-bit output, oB is a 16-bit output, alufn is a 4-bit output, oZVN is a 3-bit output, out is a 16-bit output
module rom (
    input address[6],
    output oA[16],
    output oB[16],
    output alufn[4],
    output oZVN[3],
    output out[16]
  ) {
  const A = {
    16hFAF0,16hAF00,16hF000,16h0000,//enq
    16h1234,16hFFFF,16hFFFF,16hF0F0,16hF00F,//sra
    16hFFFF,16hFFFF,16hF0F0,16hF00F,//shr
    16hFFFF,16hFFFF,16hF0F0,16hF00F,//shl
    16b0,16b0,16hFFFF,//a
    16b0,16b0,16hFFFF,//xor
    16b0,16b0,16hFFFF,//or
    16b0,16b0,16hFFFF,//and
    16b0,16b0,16b0,//cmple
    16b0,16b0,16b0,//cmplt
    16b0,16b0,16b0,//cmpeq
    b1000000000000000,b0111111111111111,16b11110,b0111111111111111,16b11110,//mul
    b1000000000000000,b0111111111111111,b1000000000000001,16b1,16b11110,//sub
    b1000000000000000,b0111111111111111,b1000000000000001,16b11110,b1000000000000000};//add
 
   const B = {
    16b1100,16b1111,16b1010,16b1111,//enq
    16b0100,16b1000,16b0000,16b0100,16b1111,//sra
    16b1000,16b0000,16b0100,16b1111,//shr
    16b1000,16b0000,16b0100,16b1111,//shl
    16b0,16hFFFF,16hFFFF,//a
    16b0,16hFFFF,16hFFFF,//xor
    16b0,16hFFFF,16hFFFF,//or
    16b0,16hFFFF,16hFFFF,//and
    b1000000000000000,b0111111111111111,16b0,//cmple
    b1000000000000000,b0111111111111111,16b0,//cmplt
    b1000000000000000,b0111111111111111,16b0,//cmpeq
    b0111111111111111,b0111111111111111,b1111111111100010,16b0,16b11111,//mul
    16b1,b1111111111111111,16b1,b0111111111111111,16b11111,//sub
    b1111111111111111,16b1,b1111111111111111,16b11111,16b1};//add
 
   const ALUSGNL = {
    b1111,b1111,b1111,b1111,//enq
    b1100,b1100,b1100,b1100,b1100,//sra
    b1011,b1011,b1011,b1011,//shr
    b1010,b1010,b1010,b1010,//shl
    b1001,b1001,b1001,//a
    b1000,b1000,b1000,//xor
    b0111,b0111,b0111,//or
    b0110,b0110,b0110,//and
    b0101,b0101,b0101,//cmple
    b0100,b0100,b0100,//cmplt
    4b11,4b11,4b11,//compeq
    4b10,4b10,4b10,4b10,4b10,//mul
    4b1,4b1,4b1,4b1,4b1,//sub
    4b0,4b0,4b0,4b0,4b0};//add
 
   const ZVN = {
    b100,b100,b100,b100,//enq
    b000,b000,b000,b000,b000,//sra
    b000,b000,b000,b000,//shr
    b000,b000,b000,b000,//shl
    b000,b000,b000,//a
    b000,b000,b000,//xor
    b000,b000,b000,//or
    b000,b000,b000,//and
    b000,b001,b100,//cmple
    b000,b001,b100,//cmplt
    b000,b001,b100,//cmpeq
    b011,b010,b001,b100,b000,//mul
    b010,b011,b001,b001,b001,//sub
    b010,b001,b001,b000,b001};//add

  
   const O = {
    16hCFAF,16hFAF0,16hAF00,16hF000,//enq
    16h0123,16hFFFF,16hFFFF,16hFF0F,16hFFFF,//sra
    16h00FF,16hFFFF,16h0F0F,16h0001,//shr
    16hFF00,16hFFFF,16h0F00,16h8000,//shl
    16b0,16b0,16hFFFF,//a
    16b0,16hFFFF,16b0,//xor
    16b0,16hFFFF,16hFFFF,//or
    16b0,16b0,16hFFFF,//and
    16b0,16b1,16b1,//cmple
    16b0,16b1,16b0,//cmplt
    16b0,16b0,16b1,//cmpeq
    b1000000000000000,b0000000000000001,b1111110001111100,16b0,16b1110100010,//mul
    b0111111111111111,b1000000000000000,b1000000000000000,b1000000000000010,b1111111111111111,//sub
    b0111111111111111,b1000000000000000,b1000000000000000,16b111101,b1000000000000001};//add

  always {
    out = O[address];
    oA = A[address];
    oB = B[address];
    alufn = ALUSGNL[address];
    oZVN = ZVN[address];
  }
}