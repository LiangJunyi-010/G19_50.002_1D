// Input: clock, reset and change fsm signal; bst and bst1 are 2 buttons on IO Shield; 16-bit switches on IO Shield
// Output: out is 16-bit output; zvn is a 3-bit output; ls is a 3-bit output
module alumanualcheckfsm (
    input clk,  // clock
    input rst,  // reset
    input bts,
    input bts1,
    input swis[16],
    input sw,
    output out[16],
    output zvn[3],
    output ls[3]
  ) {
  // S0 for a 
  // S1 for b 
  // S2 for alufn
  // S3 for show
  fsm manual_controller(.clk(clk), .rst(rst)) = {S0, S1, S2, S3}; //test cases to be put as states
  dff register_1[16](#INIT(0), .clk(clk), .rst(rst));
  dff register_2[16](#INIT(0), .clk(clk), .rst(rst));
  dff register_3[16](#INIT(0), .clk(clk), .rst(rst));
  alu alu1; //import alu
  
  sig s[16];
  sig zvn0[3];
  sig ls0[3];

  always {
  s = 16b0;
    zvn0 = 3b0;
    ls0 =4b0; 


    alu1.a = register_1.q;
    alu1.b = register_2.q;
    alu1.alufn_signal = register_3.q[3:0];
    
    case(manual_controller.q){
    
      manual_controller.S0:
      ls0[0] = b1;

      s = swis;
      register_1.d = s;
        if (bts){
        manual_controller.d = manual_controller.S1;
        }
        
        if (bts1){
        manual_controller.d = manual_controller.S0;
        }
        
      manual_controller.S1:
      ls0[1] = b1;


      s = swis;
      register_2.d = s;
        if (bts){
        manual_controller.d = manual_controller.S2;
        }
        if (bts1){
        manual_controller.d = manual_controller.S0;
        }
        
      manual_controller.S2:
      ls0[2] = b1;
      s = swis[3:0];
      register_3.d = s;
        if (bts){
        manual_controller.d = manual_controller.S3;
        }
        if (bts1){
        manual_controller.d = manual_controller.S0;
        }
        
        
      manual_controller.S3:
      ls0 = b111;

       
       s = alu1.out;
        zvn0 = alu1.zvn;
        if (bts){
        manual_controller.d = manual_controller.S0;
        }
        if (bts1){
        manual_controller.d = manual_controller.S0;
        }
        
      }
    
    if (sw){
    out[0] = ~s[0];
      out[15:1] = s[15:1];
      zvn =zvn0;
      ls = ls0;
    
    }
    else{
    out = s;
    zvn =zvn0;
    ls = ls0;
      }
    
    
  }
}
