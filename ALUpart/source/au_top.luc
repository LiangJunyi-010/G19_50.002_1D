module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  // counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  //aluromcheckfsm alucheckfsm1(.clk(slowclock.value), .rst(rst));
  //alumanualcheckfsm alumanualcheckfsm1(.clk(clk), .rst(rst));
  button_conditioner buttoncond(.clk(clk));
  edge_detector buttondetector(#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only

 
  
  alucheckfsm alucheckfsm1(.clk(clk), .rst(rst));
  reset_conditioner reset_cond(.clk(clk));
  
  fsm s_controller(.clk(clk),.rst(rst)) = {S0,S1};


  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
   
    button_conditioner enter_game_conditioner;
    edge_detector enter_game_detector(#RISE(1), #FALL(0));
   .rst(rst){
        pressbutton pressbutton(.io_button(io_button));

    }
  }
  
  
  always {

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    led = 8h00;
    io_led = 3x{{8h00}};
    io_seg = 4hf;
    io_sel = 4hf;
    
    // pressbutton mood
    enter_game_conditioner.in = io_button[2];
    enter_game_detector.in = enter_game_conditioner.out;
    
    
    alucheckfsm1.io_dip = io_dip;
    alucheckfsm1.io_button = io_button;
    
   
    //change rom to manual
    buttoncond.in = io_button[1];
    buttondetector.in = buttoncond.out;
    alucheckfsm1.bt = buttondetector.out;
    
    

    
    
    
    case(s_controller.q){
      s_controller.S0:
      io_led[0] = alucheckfsm1.out[7:0];
      io_led[1] = alucheckfsm1.out[15:8];
      io_led[2][4:3] = alucheckfsm1.show;
      io_led[2][7:5] = alucheckfsm1.zvn;
      io_led[2][2:0] = alucheckfsm1.ls;
      
        
        if (enter_game_detector.out) {
        s_controller.d = s_controller.S1;
          }
      
      s_controller.S1:
      
            
          io_led = pressbutton.io_led;
          io_seg = pressbutton.io_seg;
          io_sel = pressbutton.io_sel;
          
            
         if (enter_game_detector.out) {
        s_controller.d = s_controller.S0;
          }
      
      }
    
    
    
  }
}
